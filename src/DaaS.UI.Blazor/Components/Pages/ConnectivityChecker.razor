@page "/connectivity-checker"
@using Sentinel.ConnectionChecks.ConnectionCheck.AzureAppConfig
@using Sentinel.ConnectionChecks.ConnectionCheck.CosmosDB
@using Sentinel.ConnectionChecks.ConnectionCheck.EventHub
@using Sentinel.ConnectionChecks.ConnectionCheck.General
@using Sentinel.ConnectionChecks.ConnectionCheck.KeyVault
@using Sentinel.ConnectionChecks.ConnectionCheck.Redis
@using Sentinel.ConnectionChecks.ConnectionCheck.SQL
@using Sentinel.ConnectionChecks.ConnectionCheck.ServiceBus
@using Sentinel.ConnectionChecks.ConnectionCheck.StorageAccount
@using Sentinel.ConnectionChecks.Models



<div class="row">
    <div class="col-8">

        <Card Size="CardSize.Medium">
            <CardHeader>
                <h3>Check Connectivity</h3>
            </CardHeader>
            <CardBody>

                <div class="row g-3">
                    <div class="col-sm-9">
                        <label for="firstName" class="form-label">URL</label>
                        <input type="text" class="form-control" id="url" placeholder="URL" @bind="request.Url">
                    </div>

                    <div class="col-sm-3">
                        <label for="lastName" class="form-label">Port</label>
                        <input type="number" class="form-control" id="port" placeholder="Port" @bind="request.Port">
                    </div>


                    <div class="col-md-6">
                        <label for="country" class="form-label">Category</label>
                        <select class="form-select" id="category" @onchange="categoryChanged">
                            @foreach (var cat in RequestResourceTypeHelper.Categories)
                            {
                                <option value="@cat.Key">@cat.Value</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label for="state" class="form-label">Authentication</label>
                        <select class="form-select" id="authselect" required="" @bind="SelectedAuthenticationType">
                            <option value="None">None</option>
                            <option value="UseMSI">Use Managed Identity</option>
                            <option value="SP">Use Service Principal</option>
                        </select>
                    </div>
                </div>
                @if (request is AzureAppConfigConnectionCheckRequest req1)
                {
                    <AzureAppConfigConnectionCheckUI RequestValue=@req1 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is CosmosDBConnectionCheckRequest req2)
                {
                    <CosmosDBConnectionCheckUI RequestValue=@req2 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is EventHubConnectionCheckRequest req3)
                {
                    <EventHubConnectionCheckUI RequestValue=@req3 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is EventHubConnectionCheckRequest req4)
                {
                    <EventHubConnectionCheckUI RequestValue=@req4 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is GeneralConnectionCheckRequest req5)
                {
                    <GeneralConnectionCheckUI RequestValue=@req5 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is HttpConnectionCheckRequest req6)
                {
                    <HttpConnectionCheckUI RequestValue=@req6 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is KeyVaultConnectionCheckRequest req7)
                {
                    <KeyVaultConnectionCheckUI RequestValue=@req7 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is RedisConnectionCheckRequest req8)
                {
                    <RedisConnectionCheckUI RequestValue=@req8 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is ServiceBusConnectionCheckRequest req9)
                {
                    <ServiceBusConnectionCheckUI RequestValue=@req9 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is SQLConnectionCheckRequest req10)
                {
                    <SQLConnectionCheckUI RequestValue=@req10 RequestValueChanged="ComponentUpdated" />
                }
                @if (request is StorageAccountConnectionCheckRequest req11)
                {
                    <StorageAccountConnectionCheckUI RequestValue=@req11 RequestValueChanged="ComponentUpdated" />
                }

                @if (SelectedAuthenticationType == "SP")
                {
                    <hr class="my-4">
                    <h4> Service Principal</h4>

                    <div class="row g-3">
                        <div class="col-sm-12">
                            <input type="text" class="form-control" id="sp_tenantid" placeholder="Tanent ID" @bind="request.ServicePrincipal.TenantId">
                        </div>

                        <div class="col-sm-12">
                            <input type="text" class="form-control" id="sp_clientid" placeholder="Client ID" @bind="request.ServicePrincipal.ClientId">
                        </div>

                        <div class="col-sm-12">
                            <input type="password" class="form-control" id="sp_clientsecret" placeholder="Client Secret" @bind="request.ServicePrincipal.ClientSecret">
                        </div>
                    </div>
                }

                <hr class="my-4">
                <Button BackgroundColor="TablerColor.Primary" class="w-100 btn btn-primary" IsLoading="disableSendButton" @onclick="send_clicked">Send</Button>
            </CardBody>
        </Card>
    </div>




    <div class="col-4">
        @if (checkAccessResponse != null && checkAccessResponse.netResult != null)
        {
            @if (checkAccessResponse.netResult.IsConnected)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
                    <CardBody>
                        <CardTitle>
                            <h3>Connected  </h3>
                            <h4>NetResponseTime: @checkAccessResponse.netResult.ElapsedMilliseconds</h4>
                            <h4> IP @checkAccessResponse.ipaddress</h4>
                        </CardTitle>
                        @* Card Body *@
                    </CardBody>
                </Card>
            }


            @if (checkAccessResponse.netResult.IsConnected == false)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Danger">
                    <CardHeader>
                        <h3>Connectiviy Failed</h3>
                    </CardHeader>
                    <CardBody>

                        <h4> <b> IP:  </b> @checkAccessResponse.ipaddress</h4>
                        <h4>NetResponseTime: @checkAccessResponse.netResult.ElapsedMilliseconds</h4>
                        <br />
                        @checkAccessResponse.netResult.Message
                    </CardBody>
                </Card>
            }
        }

        @if (checkAccessResponse != null && checkAccessResponse.additionalResult != null)
        {
            @if (checkAccessResponse.additionalResult.IsConnected == true)
            {
                @if (checkAccessResponse.additionalResult.IsConnected == true)
                {
                    <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
                        <CardHeader>
                            <h3> Success @checkAccessResponse.additionalResult.CategoryTypeName</h3>
                        </CardHeader>
                        <CardBody>
                            <h4>NetResponseTime: @checkAccessResponse.additionalResult.ElapsedMilliseconds</h4>
                            <br />
                            @checkAccessResponse.additionalResult.Message
                        </CardBody>
                    </Card>
                }
            }

            @if (checkAccessResponse.additionalResult.IsConnected == false)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Danger">
                    <CardHeader>
                        <h3> Failed @checkAccessResponse.additionalResult.CategoryTypeName</h3>
                    </CardHeader>
                    <CardBody>
                        <h4>NetResponseTime: @checkAccessResponse.additionalResult.ElapsedMilliseconds</h4>
                        <br />
                        @checkAccessResponse.additionalResult.Message
                    </CardBody>
                </Card>
            }
        }
    </div>
</div>





@code {

    // [Inject] ConnectivityCheckService connectivityCheckService { get; set; }


    private int selectedCategoryValue;
    private string selectedCategoryText;
    private string SelectedAuthenticationType { get; set; } = "None";
    // private string httpMethod { get; set; } = "Get";
    private bool disableSendButton = false;
    private IBasicCheckAccessRequest request = new GeneralConnectionCheckRequest(); //= new CheckAccessRequest { Port = 443 };
    private CheckAccessResponse checkAccessResponse;

    private int currentCount = 43;

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    private void categoryChanged(ChangeEventArgs e)
    {
        selectedCategoryValue = Convert.ToInt32(e.Value);
        selectedCategoryText = RequestResourceTypeHelper.Categories[selectedCategoryValue];

        switch (selectedCategoryValue)
        {
            case 0:
                request = new GeneralConnectionCheckRequest();//.ResourceType = CheckAccessRequestResourceType.General;
                break;
            case 1:
                request = new HttpConnectionCheckRequest();
                break;
            case 2:
                request = new StorageAccountConnectionCheckRequest();
                break;
            case 3:
                request = new KeyVaultConnectionCheckRequest();
                break;
            case 4:
                request = new ServiceBusConnectionCheckRequest();
                break;
            case 5:
                request = new RedisConnectionCheckRequest();
                break;
            case 6:
                request = new EventHubConnectionCheckRequest();

                break;
            case 7:
                request = new CosmosDBConnectionCheckRequest();
                break;
            case 8:
                request = new SQLConnectionCheckRequest();

                break;
            default:
                break;
        }

    }
    private async Task send_clicked(MouseEventArgs e)
    {
        disableSendButton = true;
        Console.WriteLine(request.Url + ":" + request.Port.ToString());
        Console.WriteLine(selectedCategoryValue.ToString() + " " + SelectedAuthenticationType);
        if (SelectedAuthenticationType == "UseMSI")
        {
            request.UseMSI = true;
        }

        // checkAccessResponse = await connectivityCheckService.ConnectionCheck(request);
        // Console.WriteLine(checkAccessResponse.netResult.IsConnected.ToString());
        disableSendButton = false;


    }

    private void ComponentUpdated()
    {
        StateHasChanged();
        // Code logic for the ComponentUpdated method
    }
}