@page "/connectivity-checker"
@using Sentinel.NetworkUtils.Models
@using Sentinel.NetworkUtils.Services

<div class="row">
    <div class="col-8">

        <Card Size="CardSize.Medium">
            <CardHeader>
                <h3>Check Connectivity</h3>
            </CardHeader>
            <CardBody>
                
                    <div class="row g-3">
                        <div class="col-sm-9">
                            <label for="firstName" class="form-label">URL</label>
                            <input type="text" class="form-control" id="url" placeholder="URL" @bind="request.Url">
                        </div>

                        <div class="col-sm-3">
                            <label for="lastName" class="form-label">Port</label>
                            <input type="number" class="form-control" id="port" placeholder="Port" @bind="request.Port">
                        </div>


                        <div class="col-md-6">
                            <label for="country" class="form-label">Category</label>
                            <select class="form-select" id="category" @onchange="categoryChanged">
                                @foreach (var cat in connectivityCheckService.Categories)
                                {
                                    <option value="@cat.Key">@cat.Value</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="state" class="form-label">Authentication</label>
                            <select class="form-select" id="authselect" required="" @bind="SelectedAuthenticationType">
                                <option value="None">None</option>
                                <option value="UseMSI">Use Managed Identity</option>
                                <option value="SP">Use Service Principal</option>
                            </select>
                        </div>
                    </div>

                    @switch (selectedCategoryValue)
                    {
                        case 0:
                            <hr class="my-4">
                            <h4 class="mb-3">General</h4>
                            break;
                        case 1:
                            <hr class="my-4">
                            <h4 class="mb-3">Storage Account</h4>

                            <Alert BackgroundColor="TablerColor.Info">
                             <div class="text-secondary">
                                    Container Name and Connection string is required if MSI or Service Service Principal is used just use the domain name
                             </div>
                            </Alert>

                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="connectionstring_sa"  placeholder="Connection String" @bind="request.StrorageAccountDetails.ConnectionString">
                                </div>
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="containername" placeholder="Container Name" @bind="request.StrorageAccountDetails.containerName">
                                </div>
                            </div>
                            break;
                        case 2:
                            <hr class="my-4">
                            <h4 class="mb-3">Key Vault</h4>
                            <Alert BackgroundColor="TablerColor.Info">
                                <div class="text-secondary">
                                    just the key vault name not the URL
                                </div>
                            </Alert>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="keyvaultname" placeholder="Key Vault Name" @bind="request.KeyVaultDetails.KeyVaultName">
                                </div>
                            </div>
                            break;
                        case 3:
                            <hr class="my-4">
                            <h4 class="mb-3">Service Bus</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_sb" placeholder="Connection String" @bind="request.ServiceBusDetails.ConnectionString">
                                </div>

                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="queuename" placeholder="Queue Name" @bind="request.ServiceBusDetails.QueueName">
                                </div>
                            </div>
                            break;
                        case 4:
                            <hr class="my-4">
                            <h4 class="mb-3">Redis</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_redis" placeholder="Connection String" @bind="request.RedisDetails.ConnectionString">
                                </div>

                            <div class="col-sm-12">
                                <input type="text" class="form-control" id="redisusername" placeholder="User Name" @bind="request.RedisDetails.RedisUserName">
                            </div>
                            </div>
                            break;
                        case 5:
                            <hr class="my-4">
                            <h4 class="mb-3">Event Hub</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_eh" placeholder="Connection String" @bind="request.EventHubDetails.ConnectionString">
                                </div>

                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="eventhubname" placeholder="Event Hub Name" @bind="request.EventHubDetails.EventHubName">
                                </div>
                            </div>
                            break;
                        case 6:
                            <hr class="my-4">
                            <h4 class="mb-3">Cosmos DB</h4>
                            break;
                        case 7:
                            <hr class="my-4">
                            <h4 class="mb-3">SQL Server</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_sql" placeholder="Connection String" @bind="request.SQLServerDetails.ConnectionString">
                                </div>
                            </div>
                            break;
                        default:
                            break;

                    }

                    @if (SelectedAuthenticationType == "SP")
                    {
                        <hr class="my-4">
                        <h4> Service Principal</h4>

                    <div class="row g-3">
                        <div class="col-sm-12">
                            <input type="text" class="form-control" id="sp_tenantid" placeholder="Tanent ID" @bind="request.ServicePrincipal.TenantId">
                        </div>

                        <div class="col-sm-12">
                            <input type="text" class="form-control" id="sp_clientid" placeholder="Client ID" @bind="request.ServicePrincipal.ClientId">
                        </div>

                        <div class="col-sm-12">
                            <input type="password" class="form-control" id="sp_clientsecret" placeholder="Client Secret" @bind="request.ServicePrincipal.ClientSecret">
                        </div>
                    </div>
                    }

                    <hr class="my-4">

            
                <Button BackgroundColor="TablerColor.Primary" class="w-100 btn btn-primary" IsLoading="disableSendButton" @onclick="send_clicked">Send</Button>


            </CardBody>
        </Card>
    </div>




    <div class="col-4">

        @if(checkAccessResponse != null && checkAccessResponse.netResult != null)
        {
            
            @if (checkAccessResponse.netResult.IsConnected)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
                    <CardBody>
                        <CardTitle>
                                <h3>Connected  </h3>
                                <h4>NetResponseTime: @checkAccessResponse.netResult.ElapsedMilliseconds</h4>
                               <h4> IP @checkAccessResponse.ipaddress</h4>
                        </CardTitle>
                        @* Card Body *@
                    </CardBody>
                </Card>
            }


            @if (checkAccessResponse.netResult.IsConnected == false)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Danger">
                    <CardHeader>
                        <h3>Connectiviy Failed</h3> 
                    </CardHeader>
                    <CardBody>

                        <h4> <b> IP:  </b> @checkAccessResponse.ipaddress</h4>
                        <h4>NetResponseTime: @checkAccessResponse.netResult.ElapsedMilliseconds</h4>
                        <br />
                        @checkAccessResponse.netResult.Message
                    </CardBody>
                </Card>
            }
        }

        @if (checkAccessResponse !=null && checkAccessResponse.additionalResult != null)
        {
            @if (checkAccessResponse.additionalResult.IsConnected == true)
            {
                @if (checkAccessResponse.additionalResult.IsConnected == true)
                {
                    <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
                        <CardHeader>
                            <h3> Success @checkAccessResponse.additionalResult.CategoryTypeName</h3>
                        </CardHeader>
                        <CardBody>
                            <h4>NetResponseTime: @checkAccessResponse.additionalResult.ElapsedMilliseconds</h4>
                            <br />
                            @checkAccessResponse.additionalResult.Message
                        </CardBody>
                    </Card>
                }
            }

            @if (checkAccessResponse.additionalResult.IsConnected == false)
            {
                <Card Size="CardSize.Default" StatusStart="TablerColor.Danger">
                    <CardHeader>
                        <h3> Failed @checkAccessResponse.additionalResult.CategoryTypeName</h3>
                    </CardHeader>
                    <CardBody>
                        <h4>NetResponseTime: @checkAccessResponse.additionalResult.ElapsedMilliseconds</h4>
                        <br />
                        @checkAccessResponse.additionalResult.Message
                    </CardBody>
                </Card>
            }
        }
    </div>
</div>





@code {

    [Inject] ConnectivityCheckService connectivityCheckService { get; set; }


    private int selectedCategoryValue;
    private string selectedCategoryText;
    private string SelectedAuthenticationType { get; set; } = "None";
    private bool disableSendButton = false;
    private CheckAccessRequest request = new CheckAccessRequest{Port=443};
    private CheckAccessResponse checkAccessResponse;


    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    private void categoryChanged(ChangeEventArgs e)
    {
        selectedCategoryValue = Convert.ToInt32(e.Value);
        selectedCategoryText = connectivityCheckService.Categories[selectedCategoryValue];

        switch (selectedCategoryValue)
        {
            case 0:
                request.Url = "";
                request.Port = 443;
                request.ResourceType = CheckAccessRequestResourceType.General;
                break;
            case 1:
                request.ResourceType = CheckAccessRequestResourceType.StrorageAccount;
                request.Url = ".blob.core.windows.net";
                request.Port = 443;
                break;
            case 2:
                request.ResourceType = CheckAccessRequestResourceType.KeyVault;
                request.Url = ".vault.azure.net";
                request.Port = 443;

                break;
            case 3:
                request.Url = ".servicebus.windows.net";
                request.Port = 443;
                request.ResourceType = CheckAccessRequestResourceType.General;

                break;
            case 4:
                request.ResourceType = CheckAccessRequestResourceType.Redis;
                request.Url = ".redis.cache.windows.net";
                request.Port = 6380;
                break;
            case 5:
                request.ResourceType = CheckAccessRequestResourceType.EventHub;
                request.Url = ".servicebus.windows.net";
                request.Port = 5671;
                break;
            case 6:
                request.ResourceType = CheckAccessRequestResourceType.CosmosDB;

                request.Url = ".documents.azure.com";
                request.Port = 443;
                break;
            case 7:
                request.ResourceType = CheckAccessRequestResourceType.SQLServer;
                request.Url = ".database.windows.net";
                request.Port = 1433;
                break;
            default:
                break;
        }

    }
    private async Task send_clicked(MouseEventArgs e)
    {
        disableSendButton = true;
        Console.WriteLine(request.Url + ":" + request.Port.ToString());
        Console.WriteLine(selectedCategoryValue.ToString() + " " + SelectedAuthenticationType);
        if (SelectedAuthenticationType == "UseMSI")
        {
            request.UseMSI = true;
        }
       
        checkAccessResponse = await connectivityCheckService.ConnectionCheck(request);
        Console.WriteLine(checkAccessResponse.netResult.IsConnected.ToString());
        disableSendButton = false;
      
       
    }
}