@page "/connectivity-checker"
@using Sentinel.NetworkUtils.Models

<div class="row">
    <div class="col-8">

        <Card Size="CardSize.Medium">
            <CardHeader>
                <h3>Check Connectivity</h3>
            </CardHeader>
            <CardBody>
                <form class="needs-validation" novalidate="">
                    <div class="row g-3">
                        <div class="col-sm-9">
                            <label for="firstName" class="form-label">URL</label>
                            <input type="text" class="form-control" id="url" placeholder="URL" @bind="url">
                        </div>

                        <div class="col-sm-3">
                            <label for="lastName" class="form-label">Port</label>
                            <input type="number" class="form-control" id="port" placeholder="Port" @bind="port">
                        </div>


                        <div class="col-md-6">
                            <label for="country" class="form-label">Category</label>
                            <select class="form-select" id="category" @onchange="categoryChanged">
                                @foreach (var cat in categories)
                                {
                                    <option value="@cat.Key">@cat.Value</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="state" class="form-label">Authentication</label>
                            <select class="form-select" id="authselect" required="" @bind="SelectedAuthenticationType">
                                <option value="None">None</option>
                                <option value="UseMSI">Use Managed Identity</option>
                                <option value="SP">Use Service Principal</option>
                            </select>
                        </div>
                    </div>

                    @switch (selectedCategoryValue)
                    {
                        case 0:
                            <hr class="my-4">
                            <h4 class="mb-3">General</h4>
                            break;
                        case 1:
                            <hr class="my-4">
                            <h4 class="mb-3">Storage Account</h4>

                            <Alert BackgroundColor="TablerColor.Info">
                             <div class="text-secondary">
                                    Container Name and Connection string is required if MSI or Service Service Principal is used just use the domain name
                             </div>
                            </Alert>

                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="connectionstring_sa"  placeholder="Connection String" value="" required="">
                                </div>
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="containername"  placeholder="Container Name" value="" required="">
                                </div>
                            </div>
                            break;
                        case 2:
                            <hr class="my-4">
                            <h4 class="mb-3">Key Vault</h4>
                            <Alert BackgroundColor="TablerColor.Info">
                                <div class="text-secondary">
                                    just the key vault name not the URL
                                </div>
                            </Alert>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" name="keyvaultname" placeholder="Key Vault Name" value="" required="">
                                </div>
                            </div>
                            break;
                        case 3:
                            <hr class="my-4">
                            <h4 class="mb-3">Service Bus</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_sb" placeholder="Connection String" value="" required="">
                                </div>

                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="queuename" placeholder="Queue Name" value="" required="">
                                </div>
                            </div>
                            break;
                        case 4:
                            <hr class="my-4">
                            <h4 class="mb-3">Redis</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_redis" placeholder="Connection String" value="" required="">
                                </div>
                            </div>
                            break;
                        case 5:
                            <hr class="my-4">
                            <h4 class="mb-3">Event Hub</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_eh" placeholder="Connection String" value="" required="">
                                </div>

                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="eventhubname" placeholder="Event Hub Name" value="" required="">
                                </div>
                            </div>
                            break;
                        case 6:
                            <hr class="my-4">
                            <h4 class="mb-3">Cosmos DB</h4>
                            break;
                        case 7:
                            <hr class="my-4">
                            <h4 class="mb-3">SQL Server</h4>
                            <div class="row g-3">
                                <div class="col-sm-12">
                                    <input type="text" class="form-control" id="connectionstring_sql" placeholder="Connection String" value="" required="">
                                </div>
                            </div>
                            break;
                        default:
                            break;

                    }

                    @if (SelectedAuthenticationType == "SP")
                    {
                        <hr class="my-4">
                        <span> Service Principal</span>
                    }

                    <hr class="my-4">

                    <button class="w-100 btn btn-primary" type="submit" @onclick="send_clicked">Send</button>
                </form>

            </CardBody>
        </Card>
    </div>


    <div class="col-4">


        <Card Size="CardSize.Default">
            <CardBody>
                <CardTitle>
                    <h3>Header in the body</h3>
                </CardTitle>
                Card Body
            </CardBody>
        </Card>


    </div>

</div>





@code {

    private Dictionary<int, string> categories;
    private int selectedCategoryValue;
    private string selectedCategoryText;
    private string SelectedAuthenticationType { get; set; } = "None";

    private string url="";
    private int port=443;

    protected override async Task OnInitializedAsync()
    {

        categories = Enum.GetValues(typeof(CheckAccessRequestResourceType))
       .Cast<CheckAccessRequestResourceType>().ToDictionary(t => (int)t, t => t.ToString());

        await Task.Delay(30);



        //return Task.CompletedTask();
    }

    private void categoryChanged(ChangeEventArgs e)
    {
        selectedCategoryValue = Convert.ToInt32(e.Value);
        selectedCategoryText = categories[selectedCategoryValue];

    }
    private Task send_clicked(MouseEventArgs e)
    {
        Console.WriteLine(url + ":" + port.ToString());
        Console.WriteLine(selectedCategoryValue.ToString() + " " + SelectedAuthenticationType);
        return Task.CompletedTask;
    }
}