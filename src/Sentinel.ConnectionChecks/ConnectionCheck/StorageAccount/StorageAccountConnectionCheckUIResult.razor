@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using TabBlazor
@using TabBlazor.Services
@using MediatR
@using Sentinel.ConnectionChecks;


<hr class="my-4">
<h4 class="mb-3">Storage Account</h4>

@foreach(var item in ExtraResult)
{

    <Card Size="CardSize.Default">
        <CardHeader>
            @if (item.Value!=null && item.Value.IsConnected){
            
                <Status TextColor="TablerColor.Green" Lite  DotType=StatusDotType.Normal>@item.Key?.ObjectType.ToString()</Status>

                <span style="margin-left: auto; ">@item.Value.IPAddress</span>
            }
            else
            {
                <Status BackgroundColor="TablerColor.Red" Lite DotType=StatusDotType.Normal>@item.Key?.ObjectType.ToString()</Status>
                if(item.Value != null)
                {
                    <span style="margin-left: auto; ">@item.Value.IPAddress</span>
                }
            }

        </CardHeader>
        <CardBody>
            <span style="white-space: pre-line">
                @item.Value?.Message
            </span>
        </CardBody>
    </Card>


    
    
}

@* <Card Size="CardSize.Default" StatusStart="TablerColor.Green">
    <CardHeader>
        <h3> Success @additionalConnectionResponse.CategoryTypeName</h3>
    </CardHeader>
    <CardBody>


    </CardBody>
</Card> *@



<Alert BackgroundColor="TablerColor.Info">
    <div class="text-secondary">
        @ElapsedMilliseconds
        Container Name and Connection string is required if MSI or Service Service Principal is used just use the domain name
    </div>
</Alert>


@code {

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public StorageAccountExtraResponse ExtraResult { get; set; }

    [Parameter]
    public bool IsConnected { get; set; }

    [Parameter]
    public long ElapsedMilliseconds { get; set; }
    // [Parameter]
    // public string URL { get; set; }

    // [Parameter]
    // public StorageAccountConnectionCheckRequest RequestValue { get; set; }


    // [Parameter]
    // public EventCallback<StorageAccountConnectionCheckRequest> RequestValueChanged { get; set; }

    // private async Task UrlChanged(ChangeEventArgs e)
    // {

    //     RequestValue.Url = e.Value.ToString();
    //     await RequestValueChanged.InvokeAsync(RequestValue);
    //     this.StateHasChanged();
    // }
}