@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using TabBlazor
@using TabBlazor.Services
@using MediatR
@using Sentinel.ConnectionChecks;


<hr class="my-4">
<h4 class="mb-3">Storage Account</h4>


<Alert BackgroundColor="TablerColor.Info">
    <div class="text-secondary">
        Container Name and Connection string is required if MSI or Service Service Principal is used just use the domain name
    </div>
</Alert>

<div class="row g-3">
    <div class="col-sm-12">
        <label for="storageaccountaame" class="form-label">Storage Account Name</label>
        <input type="text" class="form-control" name="storageaccountaame" placeholder="Storage Account Name" @bind="RequestValue.StorageAccountName">

        <ValidationMessage class="alert alert-danger" For="@(() => RequestValue.StorageAccountName)" />
    </div>
</div>
@if ( RequestValue.SelectedAuthenticationType == "None")
{
    <div class="row g-3">
        <div class="col-sm-12">
            <label for="connectionstring_sa" class="form-label">Connection String</label>
            <input type="text" class="form-control" name="connectionstring_sa" placeholder="Connection String" @bind="RequestValue.ConnectionString">
        </div>
    </div>
}
<hr class="my-4">


<div class="row g-3">
    <div class="col-sm-9">
        <input type="text" class="form-control" name="containername" placeholder="Container Name" @bind="RequestValue.containerName">
    </div>
    <div class="col-sm-3" style="margin-top:25px">
        <Checkbox Label="Test Blob Storage" @bind-Value="RequestValue.TestBlobStorage" Switch />
    </div>
</div>


<div class="row g-3">
    <div class="col-sm-9">
        @* <input type="text" class="form-control" name="containername" placeholder="Container Name" @bind="RequestValue.containerName"> *@
    </div>
    <div class="col-sm-3" style="margin-top:25px">
        <Checkbox Label="Test Static Website" @bind-Value="RequestValue.TestStaticwebsite" Switch />
    </div>
</div>


<div class="row g-3">
    <div class="col-sm-9">
       @*  <input type="text" class="form-control" name="containername" placeholder="Container Name" @bind="RequestValue.containerName"> *@
    </div>
    <div class="col-sm-3" style="margin-top:25px">
        <Checkbox Label="Test DataLake Storage" @bind-Value="RequestValue.TestDataLakeStorage" Switch />
    </div>
</div>


<div class="row g-3">
    <div class="col-sm-9">
        <input type="text" class="form-control" name="containername" placeholder="Fileshare Name" @bind="RequestValue.FileshareName">
    </div>
    <div class="col-sm-3" style="margin-top:25px">
        <Checkbox Label="Test Azure Files" @bind-Value="RequestValue.TestAzureFiles" Switch />
    </div>
</div>


<div class="row g-3">
    <div class="col-sm-9">
        <input type="text" class="form-control" name="containername" placeholder="Queue Name" @bind="RequestValue.QueueName">
    </div>
     <div class="col-sm-3" style="margin-top:25px">
        <Checkbox Label="Test Queue Storage" @bind-Value="RequestValue.TestQueueStorage" Switch />
    </div>
</div>


<div class="row g-3">
    <div class="col-sm-9">
        <input type="text" class="form-control" name="containername" placeholder="Table Name" @bind="RequestValue.TableName">
    </div>
    <div class="col-sm-3" style="margin-top:25px">
        <Checkbox Label="Test Table Storage" @bind-Value="RequestValue.TestTableStorage" Switch />
    </div>
</div>


@code {
    [Parameter]
    public string URL { get; set; }

    [Parameter]
    public StorageAccountConnectionCheckRequest RequestValue { get; set; }


    [Parameter]
    public EventCallback<StorageAccountConnectionCheckRequest> RequestValueChanged { get; set; }

    private async Task UrlChanged(ChangeEventArgs e)
    {

        RequestValue.Url = e.Value.ToString();
        await RequestValueChanged.InvokeAsync(RequestValue);
        this.StateHasChanged();
    }
}